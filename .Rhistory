gene_all <- subset(gene_all, strand=="-")
Undiff <-subset(gene_all, treatment=="Undiff")$chromStart
Diff <-subset(gene_all, treatment=="Diff")$chromStart}
if ((length(Undiff)>20)&&(length(Diff)>20)){
freq_table <- table(c(Diff, Undiff))
density_vals <- as.numeric(prop.table(freq_table))
peak_indices <- which(density_vals>=min(sort(density_vals, decreasing = T)[1:50],na.rm = T))
peaks_df <- data.frame(
Value = as.numeric(names(freq_table))[peak_indices],
Frequency = as.numeric(freq_table[peak_indices]),
Density = density_vals[peak_indices]
)
df <- peaks_df[order(peaks_df$Value), ]
group <- cumsum(c(TRUE, diff(df$Value) > 10))
# Aggregate within groups
combined_df <- do.call(rbind, lapply(split(df, group), function(group_data) {
# Find the row with the highest density in the group
max_density_row <- group_data[which.max(group_data$Density), ]
# Sum the Frequency and Density for the group
max_density_row$Frequency <- sum(group_data$Frequency)
max_density_row$Density <- sum(group_data$Density)
return(max_density_row)
}))
df <- combined_df
group <- cumsum(c(TRUE, diff(df$Value) > 10))
# Aggregate within groups
combined_df <- do.call(rbind, lapply(split(df, group), function(group_data) {
# Find the row with the highest density in the group
max_density_row <- group_data[which.max(group_data$Density), ]
# Sum the Frequency and Density for the group
max_density_row$Frequency <- sum(group_data$Frequency)
max_density_row$Density <- sum(group_data$Density)
return(max_density_row)
}))
call_df <- combined_df[which((combined_df$Density>=0.03)&(combined_df$Frequency>5)),]
# Display the peaks
call_df<-(call_df[order(call_df$Density, decreasing = T),])
add_df<- data.frame(matrix(ncol=4, nrow=(length(call_df$Value))))
if(APA_table_name[i,"strand"]=="+"){
add_df<-data.frame(
chrom = gene_all$chrom[1], # Numeric column
start = as.numeric(call_df$Value), # Numeric column
end = as.numeric(call_df$Value)+5,
name = gene_info[i,"external_gene_name"],
density= as.numeric(call_df$Density),
strand = gene_info[i,"strand"]
)}
if(APA_table_name[i,"strand"]=="-"){
add_df<-data.frame(
chrom = gene_all$chrom[1], # Numeric column
start = as.numeric(call_df$Value)-5, # Numeric column
end = as.numeric(call_df$Value),
name = gene_info[i,"external_gene_name"],
density= as.numeric(call_df$Density),
strand = gene_info[i,"strand"]
)}
call_df$Density <-round(as.numeric(call_df$Density), 4)
PAS_table[i,c("PASs","PASs reads","PASs fraction")] <- c(APA_table_name[i,"external_gene_name"],paste(call_df$Value, collapse = ","),
paste(call_df$Frequency, collapse = ","),paste(call_df$Density, collapse = ","))
bed_df <-rbind(bed_df, add_df)
}
}
write.table(bed_df,file="PASs.bed",row.names = F,col.names = F,quote = F,sep = "\t")
write.table(PAS_table,file="PASs_table.txt",row.names = F,col.names = T,quote = F,sep = "\t")
View(bed_df)
test.df <- unique(bed_df)
write.table(test.df,file="PASs.bed",row.names = F,col.names = F,quote = F,sep = "\t")
write.table(bed_df[334:,],file="PASs.bed",row.names = F,col.names = F,quote = F,sep = "\t")
(bed_df[334:,]
bed_df[334:,]
write.table(bed_df[334:length(bed_df$chrom),],file="PASs.bed",row.names = F,col.names = F,quote = F,sep = "\t")
APA_genes <-duplicated(bed_df[334:length(bed_df$chrom),])
duplicated(bed_df[334:length(bed_df$chrom),])
install.packages("roxygen2")
library(roxygen2)
library(devtools)
dir()
setwd("./R_pack/")
ll
dir()
devtools::create("myfirstpackage")
dir()
dir("./myfirstpackage/")
bed_df<-bed_df[334:length(bed_df$chrom),]
?load_gtf
?load_all
#' Load a gtf file for reference
#'
#' This function loads a gtf file and extract necessary information of each gene from it.
#' @param gtf infile path to the input gtf file
#' @return a matrix of the gtf file
#' @export
load_gtf <- function(infile){
gene_annotation <- read.csv(infile, header = F, sep = "\t",skip = 4)
gene_annotation <- subset(gene_annotation, V3=="gene")
gene_annotation_expand <- gene_annotation %>%
mutate(V9 = as.character(V9)) %>%
separate_wider_regex(V9,patterns = c("gene_id ", gene_id=".\\S*","; gene_type ",
gene_biotype=".\\S*","; gene_name ",
external_gene_name=".\\S*",";"),
too_few = "align_start")
gene_annotation_expand$strand <- gene_annotation_expand$V7
gene_info <- as.data.frame(gene_annotation_expand[,c("gene_id","external_gene_name","strand")])
rownames(gene_info) <- gene_annotation_expand$gene_id
gene_info
}
devtools::document()
dir()
?devtools::document()
?devtools::document
dir()
setwd("./myfirstpackage/")
devtools::document()
dir()
devtools::document()
devtools::document()
dir()
devtools::document()
?load_gtf
devtools::document()
devtools::document()
rm(list = c("load_gtf"))
devtools::document()
dir("./man/")
?devtools::create
?load_gtf
rm(list = c("load_gtf"))
devtools::document()
?load_gtf
devtools::use_vignette("introduction")
usethat::use_vignette("introduction")
install.packages("usethat")
install.packages("usethat")
install.packages("remotes")
remotes::install_github("tidylab/usethat")
remotes::install_github("tidylab/usethat")
dir()
setwd("~/Desktop/dRNA/WT_D7_dRNA/D0_D7/tail_update/git_clone/KSAPA/KSAPA/")
CSH_data <- fread("/Volumes/directrna/hES_update/CSH_hES_0.01_D7_D0_update.tsv")
devtools::document()
remove.packages("tidytree")
devtools::document()
library("dbplyr")
install.packages("dbplyr")
devtools::document()
install.packages("dbplyr")
install.packages("dplyr")
install.packages("rlang")
install.packages("DBI")  # Another dependency
install.packages("dplyr")
dir()
devtools::document()
CSH_data <- fread("/Volumes/directrna/hES_update/CSH_hES_0.01_D7_D0_update.tsv")
CSH_test <- CSH_plot(CSH_data, delta = 0.2)
CSH_test <- APA_plot(CSH_data, delta = 0.2)
dev.off()
plot(1:100)
View(CSH_test)
setnames(CSH_data, old = "APA_change",ew = "CS_shift")
setnames(CSH_data, old = "APA_change",new = "CS_shift")
CSH_test <- CSH_plot(CSH_data, delta = 0.2)
dir()
?LRAPA::APA_plot()
remove.packages("LRAPA")
?LRAPA::APA_plot()
devtools::install("../LRAPA/", build_vignettes = TRUE)
PAU_data <- fread("/Volumes/directrna/hES_update/PAU_by_sample_hES_0.01_D7_D0_update.tsv")
library(LRAPA)
PAU_data <- fread("/Volumes/directrna/hES_update/PAU_by_sample_hES_0.01_D7_D0_update.tsv")
getwd()
setwd("~/Desktop/dRNA/WT_D7_dRNA/D0_D7/tail_update/git_clone/KSAPA/LRAPA/")
devtools::document()
PAU_data <- fread("/Volumes/directrna/hES_update/PAU_by_sample_hES_0.01_D7_D0_update.tsv")
PAS_reference <- fread("~/Downloads/hglft_genome_euro_2025fb_815b50.bed")
head(PAS_reference)
colnames(PAS_reference) <- c("chrom","start","end","gene_id","density","strand")
find_match <- function(a, b_vec) {
distances <- abs(a - b_vec)
if (any(distances <= 20)) {
return(b_vec[which.min(distances)])  # Return closest match
} else {
return(NA)  # No match within 20
}
}
match_fun <- function(gene,PAU_data){
PAS_prox <- PAU_data[gene_id==gene]
A <- PAS_prox$PAS
B <- PAS_reference[name==sub("\\..*", "", gene)]$PAS
matches <- sapply(A, find_match, b_vec = B)
PAS_prox$match <-matches
return(PAS_prox)
}
PAS_prox <- pbmclapply(genes, match_fun,PAU_data, mc.cores = 5)
genes <- unique(PAU_data$gene_id)
PAS_prox <- pbmclapply(genes, match_fun,PAU_data, mc.cores = 5)
gene <- genes[1]
PAS_prox <- PAU_data[gene_id==gene]
A <- PAS_prox$PAS
B <- PAS_reference[name==sub("\\..*", "", gene)]$PAS
colnames(PAS_reference) <- c("chrom","start","end","name","density","strand")
PAS_prox <- pbmclapply(genes, match_fun,PAU_data, mc.cores = 5)
PAS_prox_df <- rbindlist(PAS_prox, fill = T)
PAS_prox_df$distance <- abs(PAS_prox_df$PAS- PAS_prox_df$match)
PAS_prox_df$Category <- ifelse(is.na(PAS_prox_df$distance), "new",
ifelse(PAS_prox_df$distance == 0, "match", "proximity"))
table(PAS_prox_df$Category)
pie_labels <- paste(sort(unique(PAS_prox_df$Category)),
round(table(PAS_prox_df$Category)/ sum(table(PAS_prox_df$Category)) * 100, 1),
"%", sep = " ")
View(PAS_prox_df)
View(PAS_reference)
PAS_reference <- fread("~/Downloads/hglft_genome_euro_1fca75_811970.bed")
head(PAS_reference)
PAS_reference <- fread("~/Downloads/hglft_genome_euro_2025fb_815b50.bed")
colnames(PAS_reference) <- c("chrom","start","end","gene","density","strand")
PAS_reference$PAS <-fread("~/Downloads/hglft_genome_euro_1fca75_811970.bed")$V4
test <-fread("~/Downloads/hglft_genome_euro_1fca75_811970.bed")
PAS_reference$PAS <-PAS_reference$end
colnames(PAS_reference) <- c("chrom","start","end","name","density","strand","PAS")
match_fun <- function(gene,PAU_data){
PAS_prox <- PAU_data[gene_id==gene]
A <- PAS_prox$PAS
B <- PAS_reference[name==sub("\\..*", "", gene)]$PAS
matches <- sapply(A, find_match, b_vec = B)
PAS_prox$match <-matches
return(PAS_prox)
}
PAS_prox <- pbmclapply(genes, match_fun, PAU_data,mc.cores = 5)
PAS_prox_df <- rbindlist(PAS_prox, fill = T)
PAS_prox_df$distance <- abs(PAS_prox_df$PAS- PAS_prox_df$match)
PAS_prox_df$Category <- ifelse(is.na(PAS_prox_df$distance), "new",
ifelse(PAS_prox_df$distance == 0, "match", "proximity"))
table(PAS_prox_df$Category)
pie_labels <- paste(sort(unique(PAS_prox_df$Category)),
round(table(PAS_prox_df$Category)/ sum(table(PAS_prox_df$Category)) * 100, 1),
"%", sep = " ")
pie(table(PAS_prox_df$Category), labels = pie_labels, main = "hES PAS Category",
col = c("darkgreen", "tan","green"))
PAS_prox_df[, PAU_D0 := rowMeans(.SD, na.rm = TRUE), .SDcols = c(6, 8, 10)]
PAS_prox_df[, PAU_D7 := rowMeans(.SD, na.rm = TRUE), .SDcols = c(12, 14, 16)]
table(PAS_prox_df[Category!="new"])$distance)
table(PAS_prox_df[Category!="new"]$distance)
sum(table(PAS_prox_df[Category!="new"]$distance)[1:11])
sum(table(PAS_prox_df[Category!="new"]$distance)[1:11])/sum(table(PAS_prox_df[Category!="new"]$distance)[1:21]
)
distance <- PAS_prox_df[Category!="new"]$distance
observed <- table(factor(distance, levels = 0:20))  # Frequency of each number
expected <- length(distance) / 21  # Expected frequency under uniformity
chi_sq <- sum((observed - expected)^2 / expected)
p_value <- 1 - pchisq(chi_sq, df = 20)  # Degrees of freedom = 21 - 1
cat("Chi-Square Statistic:", chi_sq, "\n")
cat("P-value:", p_value, "\n")
####or random test########
library(randtests)
runs.test(distance)
# Optional: Test against a zero-inflated model
# E.g., 63.4% chance of 0, 36.6% uniform over 1:20
n <- length(distance)
exp_probs <- c(10926/n, rep((n - 10926)/(n * 20), 20))  # 63.4% 0, rest split
chi_sq_zero <- sum((observed - n * exp_probs)^2 / (n * exp_probs))
p_zero <- 1 - pchisq(chi_sq_zero, df = 20)
cat("Chi-Square P-value (zero-inflated model):", p_zero, "\n")
plot(density(PAS_prox_df$PAU_D0,bw=0.1),ylim=c(0,0.25))
lines(density(PAS_prox_df[Category=="match"]$PAU_D0, bw=0.1), col="darkgreen")
lines(density(PAS_prox_df[Category=="proximity"]$PAU_D0, bw=0.1), col="lightgreen")
lines(density(PAS_prox_df[Category=="new"]$PAU_D0, bw=0.1), col="tan")
colors <- c("new" = "tan", "match" = "darkgreen", "proximity" = "green")
point_colors <- colors[PAS_prox_df$Category]  # Map categories to colors
plot(density(PAS_prox_df$PAU_D7,bw=0.1),ylim=c(0,0.25))
lines(density(PAS_prox_df[Category=="match"]$PAU_D7, bw=0.1), col="darkgreen")
lines(density(PAS_prox_df[Category=="proximity"]$PAU_D7, bw=0.1), col="green")
lines(density(PAS_prox_df[Category=="new"]$PAU_D7, bw=0.1), col="tan")
library(BSgenome.Hsapiens.UCSC.hg38)
fetch_pre_sequence <- function(n,PAU_sequence_data) {
gene_PAS <-PAU_sequence_data[n,]
if(gene_PAS$strand=="+"){
gene_PAS[,"sequence"]<-as.character(getSeq(Hsapiens, gene_PAS$chrom, start = gene_PAS$PAS-99,
end = gene_PAS$PAS+100, strand=gene_PAS$strand))
} else {
gene_PAS[,"sequence"]<-as.character(getSeq(Hsapiens,gene_PAS$chrom, start = gene_PAS$PAS-100,
end = gene_PAS$PAS+99, strand=gene_PAS$strand))
}
return(gene_PAS[,"sequence"])
}
PAS_sequence_data <- pbmclapply(1:nrow(PAS_prox_df),
fetch_pre_sequence,PAS_prox_df, mc.cores = 3)
calc_motif_frac_dist <- function(DT, motif) {
DT <- na.omit(DT)
dna_sequences <- BStringSet(DT)
names(dna_sequences) <- 1:length(DT)
# Find motif matches
motif_matches <- vmatchPattern(motif, dna_sequences, fixed = T)
# Convert to data.table with start and end positions
motif_positions <- rbindlist(lapply(names(motif_matches), function(n) {
matches <- motif_matches[[n]]
if (length(matches) > 0) {
data.table(seq_id = n, start = start(matches), end = end(matches))
} else {
data.table(seq_id = n, start = integer(), end = integer())
}
}))
# Get sequence length
seq_length <- nchar(DT[1])
if (!all(nchar(DT) == seq_length)) {
warning("Sequences have different lengths. Using the length of the first sequence: ", seq_length)
}
# Initialize position occupancy vector
position_occupancy <- numeric(seq_length)
n_sequences <- nrow(DT)
# Count sequences occupying each position
for (i in 1:nrow(motif_positions)) {
start_pos <- motif_positions$start[i]
end_pos <- motif_positions$end[i]
if (start_pos > 0 && end_pos <= seq_length) {  # Ensure valid range
position_occupancy[start_pos:end_pos] <- position_occupancy[start_pos:end_pos] + 1
}
}
# Compute fraction of sequences occupied at each position
fraction <- position_occupancy / length(DT)
# Create data.table
dist_dt <- data.table(
position = 1:seq_length,
fraction = fraction
)
return(dist_dt)
}
# Test the function
# Test the function
rbindlist(PAS_sequence_data,fill = T)
PAS_prox_df$sequence <- rbindlist(PAS_sequence_data,fill = T)
result_novel <- calc_motif_frac_dist(DT=PAS_prox_df[Category=="new"]$sequence, motif = "AATAAA")
result_match <- calc_motif_frac_dist(DT=PAS_prox_df[Category=="match"]$sequence, motif = "AATAAA")
result_proximity <- calc_motif_frac_dist(DT=PAS_prox_df[Category=="proximity"]$sequence, motif = "AATAAA")
result_all <- calc_motif_frac_dist(DT=PAS_prox_df$sequence, motif = "AATAAA")
plot(result_match$position, result_match$fraction,
type = "l",  # Line type
col = "red",  # Empirical line color
xlim = c(0,200),
xlab = "Position (-100 to 100 bp)",  # X-axis label
ylab = "Fraction",  # Y-axis label
main = "Distribution of AAUAAA",  # Title
ylim = c(0, max(result_match$fraction) * 1.5),  # Match ggplot ylim
lwd = 2,  # Line width
frame.plot = FALSE  # Remove frame for minimal look
)
lines(result_proximity$position, result_proximity$fraction,
type = "l",  # Line type
col = "blue",  # Empirical line color
lwd = 2,  # Line width
)
lines(result_all$position, result_all$fraction,
type = "l",  # Line type
col = "black",  # Empirical line color
lwd = 2,  # Line width
)
lines(result_novel$position, result_novel$fraction,
type = "l",  # Line type
col = "tan",  # Empirical line color
lwd = 2,  # Line width
)
plot(PAS_prox_df[Category=="match"]$PAU_D0, PAS_prox_df[Category=="match"]$PAU_D7,col=colors[PAS_prox_df[Category=="match"]$Category],cex=0.5)
abline(a = 0, b = 1, lty = "dashed", col = "black")
plot(PAS_prox_df[Category=="proximity"]$PAU_D0, PAS_prox_df[Category=="proximity"]$PAU_D7,col=colors[PAS_prox_df[Category=="proximity"]$Category],cex=0.5)
abline(a = 0, b = 1, lty = "dashed", col = "black")
plot(PAS_prox_df[Category=="new"]$PAU_D0, PAS_prox_df[Category=="new"]$PAU_D7,col=colors[PAS_prox_df[Category=="new"]$Category],cex=0.5)
abline(a = 0, b = 1, lty = "dashed", col = "black")
getwd()
pdf("~/Desktop/KSAPA/Figures/hES_all/update/<?xml version="1.0" encoding="UTF-8"?>
getwd()
library(LRAPA)
head(PAS_prox_df$gene_id)
pdf("~/Desktop/KSAPA/Figures/hES_all/update/DB_match_PAS_PAU.pdf")
plot(PAS_prox_df[Category=="match"]$PAU_D0, PAS_prox_df[Category=="match"]$PAU_D7,col=colors[PAS_prox_df[Category=="match"]$Category],cex=0.5)
abline(a = 0, b = 1, lty = "dashed", col = "black")
dev.off()
pdf("~/Desktop/KSAPA/Figures/hES_all/update/DB_match_PAS_PAU.pdf", 5, 5)
plot(PAS_prox_df[Category=="match"]$PAU_D0, PAS_prox_df[Category=="match"]$PAU_D7,col=colors[PAS_prox_df[Category=="match"]$Category],cex=0.5)
abline(a = 0, b = 1, lty = "dashed", col = "black")
dev.off()
pdf("~/Desktop/KSAPA/Figures/hES_all/update/DB_match_PAS_PAU.pdf", 4.5, 4)
plot(PAS_prox_df[Category=="match"]$PAU_D0, PAS_prox_df[Category=="match"]$PAU_D7,col=colors[PAS_prox_df[Category=="match"]$Category],cex=0.5)
abline(a = 0, b = 1, lty = "dashed", col = "black")
dev.off()
pdf("~/Desktop/KSAPA/Figures/hES_all/update/DB_match_PAS_PAU.pdf", 4, 5)
plot(PAS_prox_df[Category=="match"]$PAU_D0, PAS_prox_df[Category=="match"]$PAU_D7,col=colors[PAS_prox_df[Category=="match"]$Category],cex=0.5)
abline(a = 0, b = 1, lty = "dashed", col = "black")
dev.off()
pdf("~/Desktop/KSAPA/Figures/hES_all/update/DB_match_PAS_PAU.pdf", 4.5, 5)
plot(PAS_prox_df[Category=="match"]$PAU_D0, PAS_prox_df[Category=="match"]$PAU_D7,col=colors[PAS_prox_df[Category=="match"]$Category],cex=0.5)
abline(a = 0, b = 1, lty = "dashed", col = "black")
dev.off()
pdf("~/Desktop/KSAPA/Figures/hES_all/update/DB_proximity_PAS_PAU.pdf", 4.5, 5)
plot(PAS_prox_df[Category=="proximity"]$PAU_D0, PAS_prox_df[Category=="proximity"]$PAU_D7,col=colors[PAS_prox_df[Category=="proximity"]$Category],cex=0.5)
abline(a = 0, b = 1, lty = "dashed", col = "black")
dev.off()
pdf("~/Desktop/KSAPA/Figures/hES_all/update/DB_novel_PAS_PAU.pdf", 4.5, 5)
plot(PAS_prox_df[Category=="new"]$PAU_D0, PAS_prox_df[Category=="new"]$PAU_D7,col=colors[PAS_prox_df[Category=="new"]$Category],cex=0.5)
abline(a = 0, b = 1, lty = "dashed", col = "black")
dev.off()
PAU_data <- fread("/Volumes/directrna/ENCODE_PacBio/PAU_by_sample_liver_cortex.tsv")
devtools::document()
PAU_data <- fread("/Volumes/directrna/ENCODE_PacBio/PAU_by_sample_liver_cortex.tsv")
PAS_prox <- pbmclapply(genes, match_fun, PAU_data, mc.cores = 5)
PAS_prox_df <- rbindlist(PAS_prox, fill = T)
PAS_prox_df$distance <- abs(PAS_prox_df$PAS- PAS_prox_df$match)
PAS_prox_df
View(PAS_prox_df)
View(PAS_prox_df)
PAU_data$PAS
PAS_prox_df$distance <- abs(PAS_prox_df$PAS- PAS_prox_df$match)
find_match <- function(a, b_vec) {
distances <- abs(a - b_vec)
if (any(distances <= 20)) {
return(b_vec[which.min(distances)])  # Return closest match
} else {
return(NA)  # No match within 20
}
}
PAS_reference$PAS <-PAS_reference$V4
colnames(PAS_reference) <- c("chrom","start","end","name","density","strand","PAS")
head(PAS_reference)
PAS_reference$PAS <-PAS_reference$end
colnames(PAS_reference) <- c("chrom","start","end","name","density","strand","PAS")
match_fun <- function(gene,PAU_data){
PAS_prox <- PAU_data[gene_id==gene]
A <- PAS_prox$PAS
B <- PAS_reference[name==sub("\\..*", "", gene)]$PAS
matches <- sapply(A, find_match, b_vec = B)
PAS_prox$match <-matches
return(PAS_prox)
}
PAS_prox <- pbmclapply(genes, match_fun,PAU_data, mc.cores = 5)
PAS_prox_df <- rbindlist(PAS_prox, fill = T)
View(PAS_prox_df)
head(PAS_prox_df)
PAS_prox_df$distance <- abs(PAS_prox_df$PAS- PAS_prox_df$match)
PAS_prox[[1]]
PAS_prox[[2]]
PAS_prox[[3]]
PAS_prox[[4]]
PAS_prox[[5]]
abs(as.integer(PAS_prox_df$match)- PAS_prox_df$match)
library(LRAPA)
library(data.table)
?rbindlist()
PAS_prox_df <- rbindlist(PAS_prox, fill = T)
head(PAS_prox_df)
PAS_prox_df <- rbindlist(PAS_prox, fill = T)
PAS_prox_df$distance <- abs(PAS_prox_df$PAS- PAS_prox_df$match)
PAS_prox_df <- rbindlist(PAS_prox)
head(PAS_prox_df)
getwd()
library(dplyr)
library(Seurat)
library(patchwork)
library(SeuratData)
install.packages("SeuratData")
BiocManager::install("SeuratData")
pb_ctrl.data <- Read10X(data.dir = "/Volumes/Enterica/Li_control/Data_process/isoseq_output/filtered_seurat/genes_seurat/")
pb_ctrl_seurat <-  CreateSeuratObject(counts = pb_ctrl.data, project = "pb_ctrl", min.cells = 3, min.features = 200)
pb_ctrl_seurat <- PercentageFeatureSet(pb_ctrl_seurat, pattern = "^mt-", col.name = "percent.mt")
VlnPlot(pb_ctrl_seurat, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
pb_ctrl_seurat<- NormalizeData(pb_ctrl_seurat, normalization.method = "LogNormalize", scale.factor = 10000)
pb_ctrl_seurat <- FindVariableFeatures(pb_ctrl_seurat, selection.method = "vst", nfeatures = 2000)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(pb_ctrl_seurat), 10)
# plot variable features with and without labels
VariableFeaturePlot(pb_ctrl_seurat)
LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot1 <-VariableFeaturePlot(pb_ctrl_seurat)
LabelPoints(plot = plot1, points = top10, repel = TRUE)
pb_ctrl_seurat <- ScaleData(pb_ctrl_seurat)
pb_ctrl_seurat <-  CreateSeuratObject(counts = pb_ctrl.data, project = "pb_ctrl", min.cells = 3, min.features = 200)
pb_ctrl_seurat <- PercentageFeatureSet(pb_ctrl_seurat, pattern = "^mt-", col.name = "percent.mt")
VlnPlot(pb_ctrl_seurat, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
#pb_ctrl_seurat <- subset(pb_ctrl_seurat, subset = nFeature_RNA > 100 & nFeature_RNA < 2000 & percent.mt < 25)
pb_ctrl_seurat<- NormalizeData(pb_ctrl_seurat, normalization.method = "LogNormalize", scale.factor = 10000)
pb_ctrl_seurat <- SCTransform(pb_ctrl_seurat, vars.to.regress = "percent.mt", verbose = FALSE)
pb_ctrl_seurat <- RunPCA(pb_ctrl_seurat, features = VariableFeatures(object = pb_ctrl_seurat))
ElbowPlot(pb_ctrl_seurat)
pb_ctrl_seurat <- FindNeighbors(pb_ctrl_seurat, dims = 1:20)
pb_ctrl_seurat <- FindClusters(pb_ctrl_seurat, resolution = 0.8)
pb_ctrl_seurat <- RunUMAP(pb_ctrl_seurat, dims = 1:20)
DimPlot(pb_ctrl_seurat, reduction = "umap",label = T)
pb_ctrl_seurat.markers <- FindAllMarkers(pb_ctrl_seurat, only.pos = TRUE)
pb_ctrl_seurat.markers %>%
group_by(cluster) %>%
dplyr::filter(avg_log2FC > 1) %>%
slice_head(n = 15) %>%
ungroup() -> top15_pb_ctrl
#####check overlap markers
subset(top15_seurat, gene %in%intersect(subset(top15_pb_ctrl,cluster=="2")$gene,top15_seurat$gene))
top15_pb_ctrl
View(top15_pb_ctrl)
seurat_obj <- readRDS("/Volumes/directrna/ENCODE_PacBio/MAS_Seq/Seurat_dir/Seurat.rds")
pb_ctrl_seurat@meta.data
seurat.markers <- FindAllMarkers(seurat_obj, only.pos = TRUE)
seurat.markers
seurat_obj@meta.data
FindAllMarkers(seurat_obj)
PrepSCTFindMarkers(seurat_obj)
DimPlot(seurat_obj, reduction = "umap",label = T)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("data.table",force = FALSE)
BiocManager::install("DESeq2",force = FALSE)
library(data.table)
library(data.table)
library(DESeq2)
install.packages("matrixStats")
install.packages("matrixStats")
packageVersion("matrixStats")

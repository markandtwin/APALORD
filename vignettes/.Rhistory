devtools::document("../")
knitr::opts_chunk$set(
collapse = TRUE,
tidy = TRUE,
message=FALSE,
warning = FALSE)
knitr::opts_chunk$set(
collapse = TRUE,
tidy = TRUE,
message=FALSE,
warning = FALSE)
# Initialize LRAPA workflow
# - Load package and create output directory
library(LRAPA)
# Set output directory
out_dir <- "../results"
# Load GTF annotation
# - Use hg38_chr21.gtf.gz for gene annotations
# - Validate file existence and use 5 cores for parallel processing
extdata_path <- system.file("extdata", package = "LRAPA")
gtf_file <- paste0(extdata_path, "/hg38_chr21.gtf.gz")
gene_reference <- load_gtf(gtf_file, cores = 5)
getwd()
# Load GTF annotation
# - Use hg38_chr21.gtf.gz for gene annotations
# - Validate file existence and use 5 cores for parallel processing
extdata_path <- system.file("extdata", package = "LRAPA")
gtf_file <- paste0(extdata_path, "/hg38_chr21.gtf.gz")
gene_reference <- load_gtf(gtf_file, cores = 5)
# Load GTF annotation
# - Use hg38_chr21.gtf.gz for gene annotations
# - Validate file existence and use 5 cores for parallel processing
extdata_path <- system.file("extdata", package = "LRAPA")
gtf_file <- paste0(extdata_path, "/hg38_chr21.gtf.gz")
gene_reference <- load_gtf(gtf_file, cores = 5)
# Load samples
# - Define paths to IsoQuant output directories for D0 (control) and D7 (experimental) groups
extdata_path <- system.file("extdata", package = "LRAPA")
sample1 <- c(paste0(extdata_path, "/D0/rep1"), paste0(extdata_path, "/D0/rep2"), paste0(extdata_path, "/D0/rep3"))
sample2 <- c(paste0(extdata_path, "/D7/rep1"), paste0(extdata_path, "/D7/rep2"), paste0(extdata_path, "/D7/rep3"))
reads <- load_samples(sample1, sample2, group1 = "D0", group2 = "D7")
head(reads, n=3)
# Load samples
# - Define paths to IsoQuant output directories for D0 (control) and D7 (experimental) groups
extdata_path <- system.file("extdata", package = "LRAPA")
sample1 <- c(paste0(extdata_path, "/D0/rep1"), paste0(extdata_path, "/D0/rep2"), paste0(extdata_path, "/D0/rep3"))
sample2 <- c(paste0(extdata_path, "/D7/rep1"), paste0(extdata_path, "/D7/rep2"), paste0(extdata_path, "/D7/rep3"))
reads <- load_samples(sample1, sample2, group1 = "D0", group2 = "D7")
head(reads, n=3)
# PAS calling
# - Identify PASs from reads data
# - Use direct_RNA=TRUE for direct RNA-seq
PAS_data <- PAS_calling(gene_reference, reads, cores = 5, direct_RNA = TRUE)
pas_file <- file.path(out_dir, "PAS_D7_D0.bed")
write.table(PAS_data, file = pas_file, quote = FALSE, col.names = FALSE, row.names = FALSE, sep = "\t")
# Initialize LRAPA workflow
# - Load package and create output directory
library(LRAPA)
# Set output directory
out_dir <- "./results"
if (!dir.exists(out_dir)) {
dir.create(out_dir, recursive = TRUE)
# Set permissions to drwxr-xr-x (owner: rwx, group/others: r-x)
system(paste("chmod 755", out_dir), intern = TRUE)}
# Initialize LRAPA workflow
# - Load package and create output directory
library(LRAPA)
# Set output directory
out_dir <- "./results"
if (!dir.exists(out_dir)) {
dir.create(out_dir, recursive = TRUE)
}
# PAS calling
# - Identify PASs from reads data
# - Use direct_RNA=TRUE for direct RNA-seq
PAS_data <- PAS_calling(gene_reference, reads, cores = 5, direct_RNA = TRUE)
pas_file <- file.path(out_dir, "PAS_D7_D0.bed")
write.table(PAS_data, file = pas_file, quote = FALSE, col.names = FALSE, row.names = FALSE, sep = "\t")
# PAU quantification
# - Quantify polyadenylation usage per sample
# - Use multiple cores for efficiency
PAU_data <- PAU_by_sample(gene_reference, reads, cores = 7, direct_RNA = TRUE)
pau_file <- file.path(out_dir, "PAU_by_sample_D7_D0.tsv")
write.table(PAU_data, file = pau_file, quote = FALSE, col.names = TRUE, row.names = FALSE, sep = "\t")
# Differential PAU analysis
# - Test for significant PAU changes with P_cutoff=0.05
PAU_test_data <- PAU_test(PAU_data, reads, P_cutoff = 0.05)
pau_test_file <- file.path(out_dir, "hESC_PAU_test_data_all.tsv")
write.table(PAU_test_data, file = pau_test_file, quote = FALSE, col.names = TRUE, row.names = FALSE, sep = "\t")
# Distal/proximal PAS shifts
# - Examine shifts in distal and proximal PAS usage
dPAU_test_data <- LRAPA::end_PAS_examine(PAU_data, reads, P_cutoff = 0.2,
control = "D0", experimental = "D7", position = "distal", type = "FC")
pPAU_test_data <- LRAPA::end_PAS_examine(PAU_data, reads, P_cutoff = 0.2,
control = "D0", experimental = "D7", position = "proximal", type = "delta")
# APA profiling
# - Generate APA profiles and visualize changes
APA_data <- APA_profile(gene_reference, reads, control = "D0", experimental = "D7", cores = 5, direct_RNA = TRUE)
APA_gene_table <- APA_plot(APA_data)
# The APA_plot function generates a volcano plot showing transcriptome-wide APA changes
apa_file <- file.path(out_dir, "APA_data_hES_D7_D0.tsv")
apa_table_file <- file.path(out_dir, "APA_gene_table_hES_D7_D0.tsv")
write.table(APA_data, file = apa_file, quote = FALSE, col.names = TRUE, row.names = FALSE, sep = "\t")
write.table(APA_gene_table, file = apa_table_file, quote = FALSE, col.names = TRUE, row.names = FALSE, sep = "\t")
# Single gene exploration
# - Explore APA changes for specific genes
gene_explore(gene_reference, reads, c("GART"), APA_table = APA_data, direct_RNA = TRUE)
# CSH analysis
# - Profile cleavage site heterogeneity and visualize shifts
CSH_data <- CSH_profile(reads, PAU_data, control = "D0", experimental = "D7", cores = 5, direct_RNA = TRUE)
CSH_test <- CSH_plot(CSH_data)
csh_file <- file.path(out_dir, "CSH_gene_table_hES_D0_D7.tsv")
write.table(CSH_test, file = csh_file, quote = FALSE, col.names = TRUE, row.names = FALSE, sep = "\t")
dir("./results/")
dir("./")
dir("./")
dir("../")
devtools::document()
